@page "/"
@using BlazorSmack.Components

<h1>Blazor Smack</h1>

<div class="info-container">
    <h2> Score: @score</h2>
    <h2> Time Remaining: @currentTime</h2>
    <h2> @message</h2>
</div>
<div class="board">
    @foreach(var s in Squares)
    {
        <Square SquareModel="s" OnMouseUp="() => MouseUp(s)" />
    }
</div>


@code {
    PeriodicTimer gameLoopTimer;
    PeriodicTimer gameTimeTimer;

    private void MouseUp(SquareModel s)
    {
        if (isGameRunning)
        {
            if (s.Id == hitPosition)
            {
                score += 1;
            }
        }
    }

    private Random random = new Random();
    int? lastPosition = null;

    private void SetNextApearance()
    {
        foreach(var item in Squares)
        {
            item.IsShown = false;
        }

        int randomPosition;

        do
        {
            randomPosition = random.Next(0, 9);
        } while (lastPosition == randomPosition);

        Squares[randomPosition].IsShown = true;

        hitPosition = randomPosition;
        lastPosition = randomPosition;

        StateHasChanged();
    }

    private async Task GameLoopAsync(PeriodicTimer timer)
    {
        while(isGameRunning)
        {
            SetNextApearance();
            await timer.WaitForNextTickAsync();
        }
    }

    private async Task GameTimeAsync(PeriodicTimer timer)
    {
        while(isGameRunning)
        {
            currentTime--;
            if( currentTime == 0)
            {
                message = "Game ended!!!";
                isGameRunning = false;
            }
            StateHasChanged();
            await timer.WaitForNextTickAsync();
        }
    }

    protected override void OnInitialized()
    {
        gameLoopTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(gameSpeed));

        _ = GameLoopAsync(gameLoopTimer);

        gameTimeTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        _ = GameTimeAsync(gameTimeTimer);
    }

}
